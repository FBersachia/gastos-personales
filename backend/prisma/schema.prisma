// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// MODELS
// ============================================

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String   // hashed with bcrypt
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  transactions    Transaction[]
  paymentMethods  PaymentMethod[]
  categories      Category[]
  macroCategories MacroCategory[]
  recurringSeries RecurringSeries[]

  @@map("users")
}

model PaymentMethod {
  id        String   @id @default(uuid())
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@unique([userId, name])
  @@index([userId])
  @@map("payment_methods")
}

model MacroCategory {
  id        String   @id @default(uuid())
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories Category[]

  @@unique([userId, name])
  @@index([userId])
  @@map("macro_categories")
}

model Category {
  id        String   @id @default(uuid())
  name      String
  userId    String
  macroId   String?  // nullable: category can exist without macro
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  macroCategory MacroCategory? @relation(fields: [macroId], references: [id], onDelete: SetNull)
  transactions  Transaction[]

  @@unique([userId, name])
  @@index([userId])
  @@index([macroId])
  @@map("categories")
}

model RecurringSeries {
  id        String   @id @default(uuid())
  name      String   // e.g., "Alquiler", "Seguro Auto"
  frequency String   // "MONTHLY", "ANNUAL", etc. (informative)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@unique([userId, name])
  @@index([userId])
  @@map("recurring_series")
}

model Transaction {
  id           String   @id @default(uuid())
  date         DateTime
  type         String   // "INCOME" or "EXPENSE"
  description  String   @db.Text
  amount       Decimal  @db.Decimal(12, 2) // always positive, type determines sign
  installments String?  // format: "n1/n2" or null
  userId       String
  categoryId   String
  paymentId    String
  seriesId     String?  // nullable: transaction can be standalone
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  category        Category         @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  paymentMethod   PaymentMethod    @relation(fields: [paymentId], references: [id], onDelete: Restrict)
  recurringSeries RecurringSeries? @relation(fields: [seriesId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([date])
  @@index([categoryId])
  @@index([paymentId])
  @@index([seriesId])
  @@index([userId, date])
  @@map("transactions")
}
